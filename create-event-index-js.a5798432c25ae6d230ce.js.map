{"version":3,"sources":["webpack:///./components/notification/index.js","webpack:///./components/create-event/index.js","webpack:///./utils/escape-html.js","webpack:///./pages/create-event/index.js"],"names":["message","status","toastTemplate","toastContainer","document","querySelector","wrapper","createElement","innerHTML","toastElement","firstElementChild","appendChild","toast","lastElementChild","bootstrap","Toast","animation","autohide","delay","show","setTimeout","remove","BACKEND_URL","process","SYSTEM","CreateEvent","constructor","users","async","event","preventDefault","chosenDay","this","element","querySelectorAll","chosenTime","chosenMembers","setEventName","value","newEventData","name","replace","day","Object","values","find","item","selected","time","members","filter","checked","reduce","acc","id","length","showToast","checkTimeSlotAvailability","render","response","fetch","ok","result","statusText","error","console","log","json","sendFormData","location","href","some","JSON","parse","data","method","headers","body","stringify","template","initEventListeners","addEventListener","forEach","onFormSubmit","getMembersDropdown","getDaysDropdown","getEventHoursDropdown","map","member","join","days","getEventHours","a","i","start","end","duration","push","destroy","Page","subElements","getSubElements","getUsers","initComponents","renderComponents","accum","subElement","dataset","createEvent","components","keys","component","root","append"],"mappings":"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","file":"create-event-index-js.a5798432c25ae6d230ce.js","sourcesContent":["export default (message = 'API response: succesful', status) => {\n  const toastDelay = 2000;\n\n  const toastTemplate = `\n    <div class=\"toast calendar__toast_${status} align-items-center\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\n      <div class=\"d-flex\">\n        <div class=\"toast-body\">\n          ${message}\n        </div>\n      </div>\n    </div>`;\n\n  const toastContainer = document.querySelector('.toast-container');\n\n  // tramsform toast template to html element\n  const wrapper = document.createElement('div');\n  wrapper.innerHTML = toastTemplate;\n  const toastElement = wrapper.firstElementChild;\n\n  toastContainer.appendChild(toastElement);\n\n  const toast = toastContainer.lastElementChild;\n  const toastRender = new bootstrap.Toast(toast, {\n    animation: true,\n    autohide: true,\n    delay: toastDelay,\n  });\n\n  toastRender.show();\n\n  setTimeout(() => {\n    toastContainer.firstElementChild.remove();\n  }, toastDelay);\n};\n","import escapeHtml from '../../utils/escape-html.js';\nimport showToast from '../notification';\n\nconst BACKEND_URL = process.env.BACKEND_URL;\nconst SYSTEM = process.env.SYSTEM;\nconst ENTITY_EVENTS = process.env.ENTITY_EVENTS;\n\nexport default class CreateEvent {\n  element; //html element\n  start = 10;\n  end = 18;\n  duration = 1;\n  days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'];\n\n  constructor(users) {\n    this.members = users;\n\n    this.render();\n  }\n\n  onFormSubmit = async (event) => {\n    event.preventDefault();\n\n    const chosenDay = this.element.querySelectorAll('[data-day]');\n    const chosenTime = this.element.querySelectorAll('[data-time]');\n    const chosenMembers = this.element.querySelectorAll('[data-member]');\n    const setEventName = this.element.querySelector('[data-name]').value;\n\n    const newEventData = {}; // event data template\n\n    newEventData.name = escapeHtml(setEventName);\n    newEventData.day = Object.values(chosenDay).find(\n      (item) => item.selected\n    ).value;\n    newEventData.time = Object.values(chosenTime).find(\n      (item) => item.selected\n    ).value;\n    newEventData.members = Object.values(chosenMembers)\n      .filter((item) => item.checked)\n      .reduce((acc, item) => {\n        return [...acc, { id: item.value }];\n      }, []);\n\n    if (!newEventData.name.length || !newEventData.members.length) {\n      showToast('Please fill out all fields', 'warning');\n    }\n\n    if (newEventData.name.length && newEventData.members.length) {\n      this.checkTimeSlotAvailability(newEventData);\n    }\n  };\n\n  async checkTimeSlotAvailability(newEventData) {\n    try {\n      const response = await fetch(`${BACKEND_URL}/${SYSTEM}/${ENTITY_EVENTS}`);\n\n      if (!response.ok) {\n        try {\n          const result = await response.statusText;\n          return showToast(`API: ${result}`, (status = 'error'));\n        } catch (error) {\n          console.log(error);\n        }\n      }\n\n      try {\n        const result = await response.json();\n\n        (await result) === null\n          ? (() => {\n              this.sendFormData(newEventData);\n\n              setTimeout(() => {\n                document.location.href = '/meeting-planning-calendar/';\n              }, 500);\n              console.log('No data');\n            })()\n          : (() => {\n              const isTableCellFull = result.some(\n                (item) =>\n                  JSON.parse(item.data).day === newEventData.day &&\n                  JSON.parse(item.data).time === newEventData.time\n              );\n\n              isTableCellFull\n                ? showToast(\n                    'API: This time slot is already occupied. Please choose another day or time.',\n                    'warning'\n                  )\n                : (() => {\n                    this.sendFormData(newEventData);\n\n                    setTimeout(() => {\n                      document.location.href = '/meeting-planning-calendar/';\n                    }, 2000);\n                  })();\n            })();\n      } catch (error) {\n        console.log(error);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async sendFormData(newEventData) {\n    // post event to server\n    try {\n      const response = await fetch(\n        `${BACKEND_URL}/${SYSTEM}/${ENTITY_EVENTS}`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json;charset=utf-8',\n          },\n          body: JSON.stringify({\n            data: JSON.stringify(newEventData),\n          }),\n        }\n      );\n\n      if (!response.ok) {\n        try {\n          const result = await response.statusText;\n          return showToast(`API: ${result}`, (status = 'error'));\n        } catch (error) {\n          console.log(error);\n        }\n      }\n\n      try {\n        const result = await response.status;\n        console.log(result);\n\n        showToast('API: event posted succesfully', 'succesful');\n      } catch (error) {\n        console.log(error);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  render() {\n    const wrapper = document.createElement('div');\n    wrapper.innerHTML = this.template;\n\n    const element = wrapper.firstElementChild;\n    this.element = element;\n\n    this.initEventListeners();\n\n    return this.element;\n  }\n\n  initEventListeners() {\n    // set active all checkboxes\n    const allMembersCheckbox = this.element.querySelector(\n      '#allMembersCheckbox'\n    );\n\n    allMembersCheckbox.addEventListener('click', () => {\n      const allMembers = document.querySelectorAll('[data-member]');\n      [...allMembers].forEach((item) => (item.checked = !item.checked));\n    });\n\n    this.element.addEventListener('submit', this.onFormSubmit);\n  }\n\n  get template() {\n    return `\n    <div>\n      <form class='create-event__form'>\n        <div class='create-event__form-element'>\n          <div class='create-event__form-description'>\n            Name of the event:\n          </div>\n          <div class='create-event__form-input'>\n            <input\n              placeholder='Type here'\n              type='search'\n              class='form-control'\n              data-name='name'\n            />\n          </div>\n        </div>\n\n        <div class='create-event__form-element'>\n          <div class='create-event__form-description'>\n            Participants:\n          </div>\n          ${this.getMembersDropdown()}\n        </div>\n\n        <div class='create-event__form-element'>\n          <div class='create-event__form-description'>\n            Day:\n          </div>\n          ${this.getDaysDropdown()}\n        </div>\n\n        <div class='create-event__form-element'>\n          <div class='create-event__form-description'>\n            Time:\n          </div>\n          ${this.getEventHoursDropdown()}\n        </div>\n\n        <div class='create-event__buttons-container'>\n          <a href='/meeting-planning-calendar/'>\n            <button type=\"button\" class=\"btn btn-outline-dark create-event__button\">Cancel</button>\n          </a>\n\n          <button type=\"submit\" class=\"btn btn-outline-dark create-event__button\">Create</button>\n        </div>\n      </form>\n    </div>`;\n  }\n\n  getMembersDropdown() {\n    return `\n    <div class='create-event__form-input_multiselect'>\n      <div class=\"form-check\">\n        <input class=\"form-check-input\"type=\"checkbox\" id='allMembersCheckbox' value='All members'>\n        <label class=\"form-check-label\" for=\"allMembersCheckbox\">All members</label>\n      </div>\n      ${this.members\n        .map((member) => {\n          return `\n          <div class=\"form-check\">\n            <input class=\"form-check-input\" class=\"member\" type=\"checkbox\" data-member=${member.id} value=${member.id}>\n            <label class=\"form-check-label\">${member.data.name}</label>\n          </div>`;\n        })\n        .join('')}\n    </div>`;\n  }\n\n  getDaysDropdown() {\n    return `\n    <div class='create-event__form-input'>\n      <select class='form-select form-select-lg'>\n        ${this.days\n          .map((day) => {\n            return `<option data-day='${day}' value='${day}'>${day}</option>`;\n          })\n          .join('')}\n      </select>\n    </div>`;\n  }\n\n  getEventHoursDropdown() {\n    return `\n    <div class='create-event__form-input'>\n      <select class='form-select form-select-lg'>\n        ${this.getEventHours()}\n      </select>\n    </div>`;\n  }\n\n  getEventHours() {\n    let a = [];\n\n    for (let i = this.start; i <= this.end; i = i + this.duration) {\n      a.push(`<option data-time='${i}'>${i}:00</option>`);\n    }\n\n    return a.join('');\n  }\n\n  destroy() {\n    this.element.remove();\n  }\n}\n","export default string => string\n  .replace(/&/g, '&amp;')\n  .replace(/\"/g, '&quot;')\n  .replace(/'/g, '&#39;')\n  .replace(/</g, '&lt;')\n  .replace(/>/g, '&gt;');\n","import CreateEvent from '../../components/create-event/index.js';\nimport showToast from '../../components/notification';\n\nconst BACKEND_URL = process.env.BACKEND_URL;\nconst SYSTEM = process.env.SYSTEM;\nconst ENTITY_USERS = process.env.ENTITY_USERS;\n\nexport default class Page {\n  element; //html element\n  subElements = {}; //selected elements\n  components = {}; //imported initialized components\n  users = {};\n\n  get template() {\n    return `<div>\n      <div data-element=\"createEvent\">\n        <!-- CreateEvent component -->\n      </div>\n      <div aria-live=\"polite\" aria-atomic=\"true\" class=\"position-relative\">\n        <div class=\"toast-container position-fixed bottom-0 end-0 p-3\">\n          <!-- toast element -->\n        </div>\n      </div>\n    </div>`;\n  }\n\n  async getUsers() {\n    try {\n      const response = await fetch(`${BACKEND_URL}/${SYSTEM}/${ENTITY_USERS}`);\n\n      if (!response.ok) {\n        try {\n          const result = await response.statusText;\n          return showToast(`API: ${result}`, 'error');\n        } catch (error) {\n          console.log(error);\n        }\n      }\n\n      try {\n        const result = await response.json();\n\n        if ((await result) === null)\n          return showToast(`API: no users`, 'succesful');\n\n        this.users = await result.map((item) => ({\n          id: item.id,\n          data: JSON.parse(item.data),\n        }));\n\n        setTimeout(\n          () => showToast('API: users downloaded succesfully', 'succesful'),\n          100\n        );\n      } catch (error) {\n        console.log(error);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async render() {\n    const element = document.createElement('div');\n    element.innerHTML = this.template;\n\n    this.element = element.firstElementChild;\n    this.subElements = this.getSubElements(this.element);\n\n    await this.getUsers();\n\n    this.initComponents();\n\n    this.renderComponents();\n\n    return this.element;\n  }\n\n  getSubElements(element) {\n    const elements = element.querySelectorAll('[data-element]');\n\n    return [...elements].reduce((accum, subElement) => {\n      accum[subElement.dataset.element] = subElement;\n\n      return accum;\n    }, {});\n  }\n\n  initComponents() {\n    const createEvent = new CreateEvent(this.users);\n    this.components.createEvent = createEvent;\n  }\n\n  renderComponents() {\n    Object.keys(this.components).forEach((component) => {\n      const root = this.subElements[component];\n      const { element } = this.components[component];\n\n      root.append(element);\n    });\n  }\n\n  destroy() {\n    for (const component of Object.values(this.components)) {\n      component.destroy();\n    }\n  }\n}\n"],"sourceRoot":""}